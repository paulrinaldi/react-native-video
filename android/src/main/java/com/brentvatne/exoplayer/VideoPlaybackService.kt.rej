diff a/android/src/main/java/com/brentvatne/exoplayer/VideoPlaybackService.kt b/android/src/main/java/com/brentvatne/exoplayer/VideoPlaybackService.kt	(rejected hunks)
@@ -12,6 +12,7 @@ import android.os.Binder
 import android.os.Build
 import android.os.Bundle
 import android.os.IBinder
+import android.media.AudioManager
 import androidx.core.app.NotificationCompat
 import androidx.media3.exoplayer.ExoPlayer
 import androidx.media3.session.CommandButton
@@ -47,13 +49,18 @@ class VideoPlaybackService : MediaSessionService() {
         .setIconResId(androidx.media3.ui.R.drawable.exo_notification_rewind)
         .build()
 
+    private lateinit var audioManager: AudioManager
+    private lateinit var audioFocusChangeListener: AudioManager.OnAudioFocusChangeListener
     // Player Registry
 
-    fun registerPlayer(player: ExoPlayer, from: Class<Activity>) {
+    fun registerPlayer(player: ExoPlayer, from: Class<Activity>, sourceAudioManager: AudioManager, sourceAudioFocusChangeListener: AudioManager.OnAudioFocusChangeListener) {
         if (mediaSessionsList.containsKey(player)) {
             return
         }
         sourceActivity = from
+        audioManager = sourceAudioManager
+        audioFocusChangeListener = sourceAudioFocusChangeListener
+        DebugLog.w(TAG, "registerPlayer")
 
         val mediaSession = MediaSession.Builder(this, player)
             .setId("RNVideoPlaybackService_" + player.hashCode())
@@ -238,12 +249,30 @@ class VideoPlaybackService : MediaSessionService() {
             }
 
             val session = mediaSessionsList.values.find { s -> s.player.hashCode() == playerId } ?: return super.onStartCommand(intent, flags, startId)
-
+            // DebugLog.w(TAG, actionCommand)
             handleCommand(commandFromString(actionCommand), session)
         }
         return super.onStartCommand(intent, flags, startId)
     }
 
+    private fun requestAudioFocus(): Boolean {
+        val result = audioManager.requestAudioFocus(
+            audioFocusChangeListener,
+            AudioManager.STREAM_MUSIC,
+            AudioManager.AUDIOFOCUS_GAIN
+        )
+        return result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED
+    }
+
+    fun play(session: MediaSession) {
+        DebugLog.w("VideoPlaybackService", "play")
+        val success = audioFocusChangeListener.requestAudioFocus()
+        if (!success) {
+            DebugLog.w("VideoPlaybackService", "request audio focus failed")
+        }
+        session.player.play()
+    }
+
     companion object {
         private const val SEEK_INTERVAL_MS = 10000L
         private const val TAG = "VideoPlaybackService"
@@ -270,15 +299,46 @@ class VideoPlaybackService : MediaSessionService() {
             }
         fun handleCommand(command: COMMAND, session: MediaSession) {
             // TODO: get somehow ControlsConfig here - for now hardcoded 10000ms
+            DebugLog.w("handleCommand", "" + command)
 
             when (command) {
                 COMMAND.SEEK_BACKWARD -> session.player.seekTo(session.player.contentPosition - SEEK_INTERVAL_MS)
                 COMMAND.SEEK_FORWARD -> session.player.seekTo(session.player.contentPosition + SEEK_INTERVAL_MS)
                 COMMAND.TOGGLE_PLAY -> handleCommand(if (session.player.isPlaying) COMMAND.PAUSE else COMMAND.PLAY, session)
-                COMMAND.PLAY -> session.player.play()
+                COMMAND.PLAY -> (session.sessionActivity as? VideoPlaybackService)?.play(session)
                 COMMAND.PAUSE -> session.player.pause()
                 else -> DebugLog.w(TAG, "Received COMMAND.NONE - was there an error?")
             }
         }
     }
-}
+
+    // private inner class AudioFocusChangeListener : AudioManager.OnAudioFocusChangeListener {
+    //     override fun onAudioFocusChange(focusChange: Int) {
+    //         when (focusChange) {
+    //             AudioManager.AUDIOFOCUS_LOSS -> {
+    //                 // Pause playback
+    //                 DebugLog.w("VPS:ADCL", "audiofocus loss pause 1")
+    //                 mediaSessionsList.values.forEach { it.player.pause() }
+    //             }
+    //             AudioManager.AUDIOFOCUS_LOSS_TRANSIENT -> {
+    //                 // Pause playback
+    //                 DebugLog.w("VPS:ADCL", "loss transient pause 2")
+    //                 mediaSessionsList.values.forEach { it.player.pause() }
+    //             }
+    //             AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK -> {
+    //                 // Lower the volume
+    //                 DebugLog.w("VPS:ADCL", "audiofocus loss transient can duck")
+    //                 mediaSessionsList.values.forEach { it.player.volume = 0.5f }
+    //             }
+    //             AudioManager.AUDIOFOCUS_GAIN -> {
+    //                 DebugLog.w("VPS:ADCL", "audiofocus gain")
+    //                 // Resume playback or raise volume
+    //                 mediaSessionsList.values.forEach { 
+    //                     it.player.volume = 1.0f
+    //                     it.player.play()
+    //                 }
+    //             }
+    //         }
+    //     }
+    // }
+}
\ No newline at end of file
